1. 효율적으로 언어 배우기
	1.1 비교를 통한 배움
		규칙은 언어마다 다르다
			씨언어  0 거짓 이외는 참
			루비   0 참 
			자바   0 아무의미 없고 boolean을 써야 함

	1.2 역사를 통한 배움
		어떤 언어를 배워야 하는지는 아무도 모른다
			언어가 바뀌어도 통용할 수 있는 이해력을 기를 필요가 있다.
			바뀌기 전에는 어떤 의문점이 존재했는지 가 배울점이다.

2. 프로그래밍 언어를 조감하다
	2.1 프로그래밍 언어 탄생의 역사
		eniac  무엇을 계산할지 프로그래밍함- 프로그램을 변경할 때마다 케이블의 연결을 바꾸는 것
		edsac  테이프에 구멍을 뚫어 데이터 표현하고 컴퓨터가 읽음
		fortran 1954년 수식변환 시스템 현대와 비슷한 언어등장

	2.2 프로그래밍 언어 탄생의 목적
		프로그래머가 가져야할 3가지 자질....
		나태(편안하게), 조바심(프로그램이 느린것용납못함), 자만심(틀린것을 방치하지 않음)...

		c++  빠른 실행 속도를 중시 c보다 빠르지만 언어사양이 더 복잡
		scheme  언어사양을 쉽게 , 구문에 수많은 괄호가 있음
		python  다른사람이 쓴 코드를 쉬게 해석  scheme보다 c에 가까움
				indent를 강조, 속도느림, 사양이 단순하지 않음
		php     웹서비스를 쉽게 만들 수 있도록 해줌, 문장처리를 편하게 하지 못함

	2.3 정리
		언어는 자신의 목적이있다.

3. 문법의 탄생
	3.1 문법이란
		언어 설계자가 정한 규칙

	3.2 스택 머신과 FORTH
		FORTH:  1 2 3 * +     2,3 곱하고 1을 더한다.
		java, python, ruby - stack machine의 VM을 사용함(재부적으로 forth와 같은 프로그램으로 변환(컴파일)되어 동작함)

	3.3 구문 트리와 LISP
		LISP:  (* (+ 1 2) 3)    항상 괄호를 사용
		구문트리: FORTH랑 LISP랑 다르다!
		***이해력을 확인하기 위해서는 결과물(output)을 확인한다!

	3.4 중위 표기법
		후위 표기법 : 연산자를 뒤에
		전위 표기법 : 연산자를 앞에
		중위 표기법 : 연산자를 사이에 
		**무엇을 배우면 좋을까? 
		무엇을 만들고 싶은가? 즉 목적을 명확히하고 필요한 것부터 배우면 된다!
		구문해석기Parser : 소스코드를 문자열로 읽어들여 해석하고, 그것을 구문 트리로 바꿈
						규칙간의 마찰이 일어나지 않아야 한다
	3.5 정리
		규칙간의 마찰이 잃어나지 않기 위해 어려운 작성법이 있는거야
4. 처리 흐름 제어(어셈블리어는 제어구문이 없고 씨언어는 있는걸까?)
	4.1 구조화 프로그래밍의 탄생
		1960년대 후반, 사람이 프로그램을 보다 편하게 쓰고 읽을 수 있도록 규칙을 만들자!
	4.2 if가 탄생하기 전
		_main :...
			mov1 $123, -8(%rbp)
			mov1 -8(rbp), %eax
			cmp1 $456, %eax
			jne LBB1_2
			#if 안
		Lbb1_2:
			#if 뒤
		### goto 문으로 장착 되어 있음...보기 너무 어지러움
	4.3 while, 반복되는 if를 읽기 쉽게 표현
	4.4 for, 수치를 증가시키는 while을 읽기 쉽게 표현
5. 함수(함수는 왜생겨 난 걸까?)
	5.1 함수의 역할
		-코드가 많아지면 전체를 파악하기 어렵다 그래서 몇개의 행을 하나의 그룹으로 묶어서 거기에 이름을 붙임
		-똑같은 코드를 재사용 할경우를 위해 
	5.2 돌아가는 명령
		어디에서 점프해 왔는지 기억해두고 나중에 돌아가 는 명령을 만나면 점프명령 직후로 점프하게 하고 싶어-> 그래서 goto 문으로는 부족 한거야!
		스택에다 내 나주에 돌아갈 위치를 저장
	5.3 재귀 호출
		비슷한 흐름이 여러번 반복 될때 함수를 하나만 만들어 반복적으로 사용하는것
	5.4 정리
6. 에러 처리
	6.1 프로그램도 실패를 한다.
		
	6.2 실패를 어떻게 전달할까?

	6.3 실패할 것 같은 처리를 묶는 구문

	6.4 출구는 하나다

	6.5 어떤 경우에 예외를 던질까?

	6.6 예외의 전파

	6.7 정리



